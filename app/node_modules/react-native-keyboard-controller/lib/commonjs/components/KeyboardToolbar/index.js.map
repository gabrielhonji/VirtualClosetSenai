{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNativeKeyboardController","_bindings","_useColorScheme","_interopRequireDefault","_Arrow","_Button","_colors","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","TEST_ID_KEYBOARD_TOOLBAR","TEST_ID_KEYBOARD_TOOLBAR_PREVIOUS","TEST_ID_KEYBOARD_TOOLBAR_NEXT","TEST_ID_KEYBOARD_TOOLBAR_CONTENT","TEST_ID_KEYBOARD_TOOLBAR_DONE","KEYBOARD_TOOLBAR_HEIGHT","DEFAULT_OPACITY","offset","closed","dismissKeyboard","KeyboardController","dismiss","goToNextField","setFocusTo","goToPrevField","KeyboardToolbar","content","theme","colors","doneText","button","icon","showArrows","onNextCallback","onPrevCallback","onDoneCallback","blur","opacity","colorScheme","useColorScheme","inputs","setInputs","useState","current","count","isPrevDisabled","isNextDisabled","useEffect","subscription","FocusedInputEvents","addListener","remove","doneStyle","useMemo","styles","doneButton","color","primary","toolbarStyle","toolbar","backgroundColor","background","ButtonContainer","Button","IconContainer","Arrow","onPressNext","useCallback","onPressPrev","onPressDone","createElement","KeyboardStickyView","View","style","testID","Fragment","accessibilityLabel","accessibilityHint","disabled","onPress","type","flex","rippleRadius","doneButtonContainer","Text","maxFontSizeMultiplier","StyleSheet","create","position","bottom","alignItems","width","flexDirection","height","paddingHorizontal","fontWeight","fontSize","marginRight","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nimport {\n  FocusedInputEvents,\n  KeyboardStickyView,\n} from \"react-native-keyboard-controller\";\n\nimport { KeyboardController } from \"../../bindings\";\nimport useColorScheme from \"../hooks/useColorScheme\";\n\nimport Arrow from \"./Arrow\";\nimport Button from \"./Button\";\nimport { colors } from \"./colors\";\n\nimport type { HEX, KeyboardToolbarTheme } from \"./types\";\nimport type { ReactNode } from \"react\";\n\nexport type KeyboardToolbarProps = {\n  /** An element that is shown in the middle of the toolbar. */\n  content?: JSX.Element | null;\n  /** A set of dark/light colors consumed by toolbar component. */\n  theme?: KeyboardToolbarTheme;\n  /** Custom text for done button. */\n  doneText?: ReactNode;\n  /** Custom touchable component for toolbar (used for prev/next/done buttons). */\n  button?: typeof Button;\n  /** Custom icon component used to display next/prev buttons. */\n  icon?: typeof Arrow;\n  /**\n   * Whether to show next and previous buttons. Can be useful to set it to `false` if you have only one input\n   * and want to show only `Done` button. Default to `true`.\n   */\n  showArrows?: boolean;\n  /**\n   * A callback that is called when the user presses the next button along with the default action.\n   */\n  onNextCallback?: () => void;\n  /**\n   * A callback that is called when the user presses the previous button along with the default action.\n   */\n  onPrevCallback?: () => void;\n  /**\n   * A callback that is called when the user presses the done button along with the default action.\n   */\n  onDoneCallback?: () => void;\n  /**\n   * A component that applies blur effect to the toolbar.\n   */\n  blur?: JSX.Element | null;\n  /**\n   * A value for container opacity in hexadecimal format (e.g. `ff`). Default value is `ff`.\n   */\n  opacity?: HEX;\n};\nconst TEST_ID_KEYBOARD_TOOLBAR = \"keyboard.toolbar\";\nconst TEST_ID_KEYBOARD_TOOLBAR_PREVIOUS = `${TEST_ID_KEYBOARD_TOOLBAR}.previous`;\nconst TEST_ID_KEYBOARD_TOOLBAR_NEXT = `${TEST_ID_KEYBOARD_TOOLBAR}.next`;\nconst TEST_ID_KEYBOARD_TOOLBAR_CONTENT = `${TEST_ID_KEYBOARD_TOOLBAR}.content`;\nconst TEST_ID_KEYBOARD_TOOLBAR_DONE = `${TEST_ID_KEYBOARD_TOOLBAR}.done`;\n\nconst KEYBOARD_TOOLBAR_HEIGHT = 42;\nconst DEFAULT_OPACITY: HEX = \"FF\";\nconst offset = { closed: KEYBOARD_TOOLBAR_HEIGHT };\n\nconst dismissKeyboard = () => KeyboardController.dismiss();\nconst goToNextField = () => KeyboardController.setFocusTo(\"next\");\nconst goToPrevField = () => KeyboardController.setFocusTo(\"prev\");\n\n/**\n * `KeyboardToolbar` is a component that is shown above the keyboard with `Prev`/`Next` and\n * `Done` buttons.\n */\nconst KeyboardToolbar: React.FC<KeyboardToolbarProps> = ({\n  content,\n  theme = colors,\n  doneText,\n  button,\n  icon,\n  showArrows = true,\n  onNextCallback,\n  onPrevCallback,\n  onDoneCallback,\n  blur = null,\n  opacity = DEFAULT_OPACITY,\n}) => {\n  const colorScheme = useColorScheme();\n  const [inputs, setInputs] = useState({\n    current: 0,\n    count: 0,\n  });\n  const isPrevDisabled = inputs.current === 0;\n  const isNextDisabled = inputs.current === inputs.count - 1;\n\n  useEffect(() => {\n    const subscription = FocusedInputEvents.addListener(\"focusDidSet\", (e) => {\n      setInputs(e);\n    });\n\n    return subscription.remove;\n  }, []);\n  const doneStyle = useMemo(\n    () => [styles.doneButton, { color: theme[colorScheme].primary }],\n    [colorScheme, theme],\n  );\n  const toolbarStyle = useMemo(\n    () => [\n      styles.toolbar,\n      {\n        backgroundColor: `${theme[colorScheme].background}${opacity}`,\n      },\n    ],\n    [colorScheme, opacity, theme],\n  );\n  const ButtonContainer = button || Button;\n  const IconContainer = icon || Arrow;\n\n  const onPressNext = useCallback(() => {\n    goToNextField();\n    onNextCallback?.();\n  }, [onNextCallback]);\n  const onPressPrev = useCallback(() => {\n    goToPrevField();\n    onPrevCallback?.();\n  }, [onPrevCallback]);\n  const onPressDone = useCallback(() => {\n    dismissKeyboard();\n    onDoneCallback?.();\n  }, [onDoneCallback]);\n\n  return (\n    <KeyboardStickyView offset={offset}>\n      <View style={toolbarStyle} testID={TEST_ID_KEYBOARD_TOOLBAR}>\n        {blur}\n        {showArrows && (\n          <>\n            <ButtonContainer\n              accessibilityLabel=\"Previous\"\n              accessibilityHint=\"Will move focus to previous field\"\n              disabled={isPrevDisabled}\n              onPress={onPressPrev}\n              testID={TEST_ID_KEYBOARD_TOOLBAR_PREVIOUS}\n              theme={theme}\n            >\n              <IconContainer\n                disabled={isPrevDisabled}\n                type=\"prev\"\n                theme={theme}\n              />\n            </ButtonContainer>\n            <ButtonContainer\n              accessibilityLabel=\"Next\"\n              accessibilityHint=\"Will move focus to next field\"\n              disabled={isNextDisabled}\n              onPress={onPressNext}\n              testID={TEST_ID_KEYBOARD_TOOLBAR_NEXT}\n              theme={theme}\n            >\n              <IconContainer\n                disabled={isNextDisabled}\n                type=\"next\"\n                theme={theme}\n              />\n            </ButtonContainer>\n          </>\n        )}\n\n        <View style={styles.flex} testID={TEST_ID_KEYBOARD_TOOLBAR_CONTENT}>\n          {content}\n        </View>\n        <ButtonContainer\n          accessibilityLabel=\"Done\"\n          accessibilityHint=\"Will close the keyboard\"\n          onPress={onPressDone}\n          testID={TEST_ID_KEYBOARD_TOOLBAR_DONE}\n          rippleRadius={28}\n          style={styles.doneButtonContainer}\n          theme={theme}\n        >\n          <Text style={doneStyle} maxFontSizeMultiplier={1.3}>\n            {doneText || \"Done\"}\n          </Text>\n        </ButtonContainer>\n      </View>\n    </KeyboardStickyView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flex: {\n    flex: 1,\n  },\n  toolbar: {\n    position: \"absolute\",\n    bottom: 0,\n    alignItems: \"center\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    height: KEYBOARD_TOOLBAR_HEIGHT,\n    paddingHorizontal: 8,\n  },\n  doneButton: {\n    fontWeight: \"600\",\n    fontSize: 15,\n  },\n  doneButtonContainer: {\n    marginRight: 8,\n  },\n});\n\nexport { colors as DefaultKeyboardToolbarTheme };\nexport default KeyboardToolbar;\n"],"mappings":"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","ignoreList":[]}