"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DefaultKeyboardToolbarTheme", {
  enumerable: true,
  get: function () {
    return _colors.colors;
  }
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeKeyboardController = require("react-native-keyboard-controller");
var _bindings = require("../../bindings");
var _useColorScheme = _interopRequireDefault(require("../hooks/useColorScheme"));
var _Arrow = _interopRequireDefault(require("./Arrow"));
var _Button = _interopRequireDefault(require("./Button"));
var _colors = require("./colors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const TEST_ID_KEYBOARD_TOOLBAR = "keyboard.toolbar";
const TEST_ID_KEYBOARD_TOOLBAR_PREVIOUS = `${TEST_ID_KEYBOARD_TOOLBAR}.previous`;
const TEST_ID_KEYBOARD_TOOLBAR_NEXT = `${TEST_ID_KEYBOARD_TOOLBAR}.next`;
const TEST_ID_KEYBOARD_TOOLBAR_CONTENT = `${TEST_ID_KEYBOARD_TOOLBAR}.content`;
const TEST_ID_KEYBOARD_TOOLBAR_DONE = `${TEST_ID_KEYBOARD_TOOLBAR}.done`;
const KEYBOARD_TOOLBAR_HEIGHT = 42;
const DEFAULT_OPACITY = "FF";
const offset = {
  closed: KEYBOARD_TOOLBAR_HEIGHT
};
const dismissKeyboard = () => _bindings.KeyboardController.dismiss();
const goToNextField = () => _bindings.KeyboardController.setFocusTo("next");
const goToPrevField = () => _bindings.KeyboardController.setFocusTo("prev");

/**
 * `KeyboardToolbar` is a component that is shown above the keyboard with `Prev`/`Next` and
 * `Done` buttons.
 */
const KeyboardToolbar = ({
  content,
  theme = _colors.colors,
  doneText,
  button,
  icon,
  showArrows = true,
  onNextCallback,
  onPrevCallback,
  onDoneCallback,
  blur = null,
  opacity = DEFAULT_OPACITY
}) => {
  const colorScheme = (0, _useColorScheme.default)();
  const [inputs, setInputs] = (0, _react.useState)({
    current: 0,
    count: 0
  });
  const isPrevDisabled = inputs.current === 0;
  const isNextDisabled = inputs.current === inputs.count - 1;
  (0, _react.useEffect)(() => {
    const subscription = _reactNativeKeyboardController.FocusedInputEvents.addListener("focusDidSet", e => {
      setInputs(e);
    });
    return subscription.remove;
  }, []);
  const doneStyle = (0, _react.useMemo)(() => [styles.doneButton, {
    color: theme[colorScheme].primary
  }], [colorScheme, theme]);
  const toolbarStyle = (0, _react.useMemo)(() => [styles.toolbar, {
    backgroundColor: `${theme[colorScheme].background}${opacity}`
  }], [colorScheme, opacity, theme]);
  const ButtonContainer = button || _Button.default;
  const IconContainer = icon || _Arrow.default;
  const onPressNext = (0, _react.useCallback)(() => {
    goToNextField();
    onNextCallback === null || onNextCallback === void 0 || onNextCallback();
  }, [onNextCallback]);
  const onPressPrev = (0, _react.useCallback)(() => {
    goToPrevField();
    onPrevCallback === null || onPrevCallback === void 0 || onPrevCallback();
  }, [onPrevCallback]);
  const onPressDone = (0, _react.useCallback)(() => {
    dismissKeyboard();
    onDoneCallback === null || onDoneCallback === void 0 || onDoneCallback();
  }, [onDoneCallback]);
  return /*#__PURE__*/_react.default.createElement(_reactNativeKeyboardController.KeyboardStickyView, {
    offset: offset
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: toolbarStyle,
    testID: TEST_ID_KEYBOARD_TOOLBAR
  }, blur, showArrows && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(ButtonContainer, {
    accessibilityLabel: "Previous",
    accessibilityHint: "Will move focus to previous field",
    disabled: isPrevDisabled,
    onPress: onPressPrev,
    testID: TEST_ID_KEYBOARD_TOOLBAR_PREVIOUS,
    theme: theme
  }, /*#__PURE__*/_react.default.createElement(IconContainer, {
    disabled: isPrevDisabled,
    type: "prev",
    theme: theme
  })), /*#__PURE__*/_react.default.createElement(ButtonContainer, {
    accessibilityLabel: "Next",
    accessibilityHint: "Will move focus to next field",
    disabled: isNextDisabled,
    onPress: onPressNext,
    testID: TEST_ID_KEYBOARD_TOOLBAR_NEXT,
    theme: theme
  }, /*#__PURE__*/_react.default.createElement(IconContainer, {
    disabled: isNextDisabled,
    type: "next",
    theme: theme
  }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.flex,
    testID: TEST_ID_KEYBOARD_TOOLBAR_CONTENT
  }, content), /*#__PURE__*/_react.default.createElement(ButtonContainer, {
    accessibilityLabel: "Done",
    accessibilityHint: "Will close the keyboard",
    onPress: onPressDone,
    testID: TEST_ID_KEYBOARD_TOOLBAR_DONE,
    rippleRadius: 28,
    style: styles.doneButtonContainer,
    theme: theme
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: doneStyle,
    maxFontSizeMultiplier: 1.3
  }, doneText || "Done"))));
};
const styles = _reactNative.StyleSheet.create({
  flex: {
    flex: 1
  },
  toolbar: {
    position: "absolute",
    bottom: 0,
    alignItems: "center",
    width: "100%",
    flexDirection: "row",
    height: KEYBOARD_TOOLBAR_HEIGHT,
    paddingHorizontal: 8
  },
  doneButton: {
    fontWeight: "600",
    fontSize: 15
  },
  doneButtonContainer: {
    marginRight: 8
  }
});
var _default = exports.default = KeyboardToolbar;
//# sourceMappingURL=index.js.map