{"version":3,"names":["React","forwardRef","useCallback","useMemo","findNodeHandle","useWindowDimensions","Reanimated","interpolate","scrollTo","useAnimatedReaction","useAnimatedRef","useAnimatedStyle","useSharedValue","useFocusedInputHandler","useReanimatedFocusedInput","useSmoothKeyboardHandler","debounce","KeyboardAwareScrollView","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","onScroll","onScrollProps","rest","ref","scrollViewAnimatedRef","scrollViewTarget","scrollPosition","position","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","layout","height","event","value","nativeEvent","contentOffset","y","onRef","assignedRef","current","onScrollViewLayout","e","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","interpolatedScrollTo","targetScrollY","Math","max","positionOnScreen","topOfScreen","onChangeText","_layout$value4","_input$value","prevScrollPosition","prevLayout","onChangeTextHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","target","onMove","onEnd","previous","view","paddingBottom","createElement","ScrollView","_extends","scrollEventThrottle","View","style"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { findNodeHandle, useWindowDimensions } from \"react-native\";\nimport Reanimated, {\n  interpolate,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n} from \"react-native-keyboard-controller\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type { FocusedInputLayoutChangedEvent } from \"react-native-keyboard-controller\";\n\nexport type KeyboardAwareScrollViewProps = {\n  /** The distance between keyboard and focused `TextInput` when keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n} & ScrollViewProps;\n\n/*\n * Everything begins from `onStart` handler. This handler is called every time,\n * when keyboard changes its size or when focused `TextInput` was changed. In\n * this handler we are calculating/memoizing values which later will be used\n * during layout movement. For that we calculate:\n * - layout of focused field (`layout`) - to understand whether there will be overlap\n * - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n * - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n * - current scroll position (`scrollPosition`) - used to scroll from this point\n *\n * Once we've calculated all necessary variables - we can actually start to use them.\n * It happens in `onMove` handler - this function simply calls `maybeScroll` with\n * current keyboard frame height. This functions makes the smooth transition.\n *\n * When the transition has finished we go to `onEnd` handler. In this handler\n * we verify, that the current field is not overlapped within a keyboard frame.\n * For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n * however there could be some cases, when `onMove` is not called:\n * - on iOS when TextInput was changed - keyboard transition is instant\n * - on Android when TextInput was changed and keyboard size wasn't changed\n * So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n *\n * ====================================================================================================================+\n * -----------------------------------------------------Flow chart-----------------------------------------------------+\n * ====================================================================================================================+\n *\n * +============================+       +============================+        +==================================+\n * +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n * +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n * +============================+       +============================+        +==================================+\n *\n *\n * +============================+       +============================+        +=====================================+\n * + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n * +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n * +============================+       +============================+        +=====================================+\n *\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      onScroll: onScrollProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useSharedValue(0);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onScroll = useCallback<NonNullable<ScrollViewProps[\"onScroll\"]>>(\n      (event) => {\n        position.value = event.nativeEvent.contentOffset.y;\n\n        onScrollProps?.(event);\n      },\n      [onScrollProps],\n    );\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [0, keyboardHeight.value - (height - point) + bottomOffset],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (absoluteY < 0) {\n          const positionOnScreen = visibleRect - inputHeight - bottomOffset;\n          const topOfScreen = scrollPosition.value + absoluteY;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled],\n    );\n\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n\n      // if typing a text caused layout shift, then we need to ignore this handler\n      // because this event will be handled in `useAnimatedReaction` below\n      if (layout.value?.layout.height !== input.value?.layout.height) {\n        return;\n      }\n\n      const prevScrollPosition = scrollPosition.value;\n      const prevLayout = layout.value;\n\n      scrollPosition.value = position.value;\n      layout.value = input.value;\n      maybeScroll(keyboardHeight.value, true);\n      scrollPosition.value = prevScrollPosition;\n      layout.value = prevLayout;\n    }, [maybeScroll]);\n\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n\n    useFocusedInputHandler(\n      {\n        onChangeText: onChangeTextHandler,\n      },\n      [onChangeTextHandler],\n    );\n\n    useSmoothKeyboardHandler(\n      {\n        onStart: (e) => {\n          \"worklet\";\n\n          const keyboardWillChangeSize =\n            keyboardHeight.value !== e.height && e.height > 0;\n          keyboardWillAppear.value = e.height > 0 && keyboardHeight.value === 0;\n          const keyboardWillHide = e.height === 0;\n          const focusWasChanged =\n            (tag.value !== e.target && e.target !== -1) ||\n            keyboardWillChangeSize;\n\n          if (keyboardWillChangeSize) {\n            initialKeyboardSize.value = keyboardHeight.value;\n          }\n\n          if (keyboardWillHide) {\n            // on back transition need to interpolate as [0, keyboardHeight]\n            initialKeyboardSize.value = 0;\n            scrollPosition.value = scrollBeforeKeyboardMovement.value;\n          }\n\n          if (\n            keyboardWillAppear.value ||\n            keyboardWillChangeSize ||\n            focusWasChanged\n          ) {\n            // persist scroll value\n            scrollPosition.value = position.value;\n            // just persist height - later will be used in interpolation\n            keyboardHeight.value = e.height;\n          }\n\n          // focus was changed\n          if (focusWasChanged) {\n            tag.value = e.target;\n\n            // save position of focused text input when keyboard starts to move\n            layout.value = input.value;\n            // save current scroll position - when keyboard will hide we'll reuse\n            // this value to achieve smooth hide effect\n            scrollBeforeKeyboardMovement.value = position.value;\n          }\n\n          if (focusWasChanged && !keyboardWillAppear.value) {\n            // update position on scroll value, so `onEnd` handler\n            // will pick up correct values\n            position.value += maybeScroll(e.height, true);\n          }\n        },\n        onMove: (e) => {\n          \"worklet\";\n\n          currentKeyboardFrameHeight.value = e.height;\n\n          // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n          if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n            maybeScroll(e.height);\n          }\n        },\n        onEnd: (e) => {\n          \"worklet\";\n\n          keyboardHeight.value = e.height;\n          scrollPosition.value = position.value;\n        },\n      },\n      [height, maybeScroll, disableScrollOnKeyboardHide],\n    );\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          const prevLayout = layout.value;\n\n          layout.value = input.value;\n          scrollPosition.value += maybeScroll(keyboardHeight.value, true);\n          layout.value = prevLayout;\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () =>\n        enabled\n          ? {\n              // animations become choppy when scrolling to the end of the `ScrollView` (when the last input is focused)\n              // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n              // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n              // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n              // re-calculation on every animation frame and it helps to achieve smooth animation.\n              // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n              paddingBottom: currentKeyboardFrameHeight.value + 1,\n            }\n          : {},\n      [enabled],\n    );\n\n    return (\n      <Reanimated.ScrollView\n        ref={onRef}\n        {...rest}\n        onLayout={onScrollViewLayout}\n        onScroll={onScroll}\n        scrollEventThrottle={16}\n      >\n        {children}\n        <Reanimated.View style={view} />\n      </Reanimated.ScrollView>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}